using System.Linq;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Xunit;

namespace EntityLengths.Generator.Tests;

public class EntityMaxLengthGeneratorTests
{
    private const string EntityClassText =
        @"
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;

namespace TestNamespace;

public class User
{
    public required string Name { get; set; }
}

public class UserConfiguration : IEntityTypeConfiguration<User>
{
    public void Configure(EntityTypeBuilder<User> builder)
    {
        builder.Property(p => p.Name).HasMaxLength(50).IsRequired();
    }
}";

    private const string ExpectedEntityLengthsClassText =
        @"// <auto-generated/>
namespace EntityMaxLengthGeneratorTests;

public static partial class EntityLengths 
{
    public static partial class User 
	{
        public const int NameLength = 50;
    }
}
";

    [Fact]
    public void GenerateReportMethod()
    {
        // Create an instance of the source generator.
        var generator = new EntityMaxLengthGenerator();

        // Source generators should be tested using 'GeneratorDriver'.
        var driver = CSharpGeneratorDriver.Create(generator);

        // We need to create a compilation with the required source code.
        var compilation = CSharpCompilation.Create(
            nameof(EntityMaxLengthGeneratorTests),
            [CSharpSyntaxTree.ParseText(EntityClassText)],
            [
                // To support 'System.Attribute' inheritance, add reference to 'System.Private.CoreLib'.
                MetadataReference.CreateFromFile(typeof(object).Assembly.Location),
            ]
        );

        // Run generators and retrieve all results.
        var runResult = driver.RunGenerators(compilation).GetRunResult();

        // All generated files can be found in 'RunResults.GeneratedTrees'.
        var generatedFileSyntax = runResult.GeneratedTrees.Single(t =>
            t.FilePath.EndsWith("EntityLengths.g.cs")
        );

        // Complex generators should be tested using text comparison.
        Assert.Equal(
            ExpectedEntityLengthsClassText,
            generatedFileSyntax.GetText().ToString(),
            ignoreLineEndingDifferences: true
        );
    }
}
