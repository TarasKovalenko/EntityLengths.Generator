using System.Collections.Immutable;
using EntityLengths.Generator.Extractors;
using EntityLengths.Generator.Models;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;

namespace EntityLengths.Generator;

[Generator]
public class EntityMaxLengthGenerator : IIncrementalGenerator
{
    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        // Find entity type configuration classes
        var providerConfigTypes = context
            .SyntaxProvider.CreateSyntaxProvider(
                predicate: (s, _) =>
                    s is ClassDeclarationSyntax cds
                    && cds.BaseList?.Types.Any(t =>
                        t.Type.ToString().StartsWith("IEntityTypeConfiguration")
                    ) == true,
                transform: (syntaxContext, _) =>
                    new FluentConfigurationExtractor().ExtractPropertyLengths(syntaxContext)
            )
            .Where(x => x != null);

        // Find entity classes with string properties that have MaxLength attribute
        var entityTypesWithAttributes = context
            .SyntaxProvider.CreateSyntaxProvider(
                predicate: (s, _) => s is ClassDeclarationSyntax,
                transform: (syntaxContext, _) =>
                    new AttributeExtractor().ExtractPropertyLengths(syntaxContext)
            )
            .Where(x => x != null);

        // Find DbContext classes
        var dbContextConfigurations = context
            .SyntaxProvider.CreateSyntaxProvider(
                predicate: (s, _) =>
                    s is ClassDeclarationSyntax cds
                    && cds.BaseList?.Types.Any(t => t.Type.ToString().Contains("DbContext"))
                        == true,
                transform: (syntaxContext, _) =>
                    new DbContextConfigurationExtractor().ExtractPropertyLengths(syntaxContext)
            )
            .Where(x => x != null);

        // Combine all configurations
        var compilationAndConfigurations = context
            .CompilationProvider.Combine(providerConfigTypes.Collect())
            .Combine(entityTypesWithAttributes.Collect())
            .Combine(dbContextConfigurations.Collect());

        context.RegisterSourceOutput(
            compilationAndConfigurations,
            static (spc, source) =>
                GenerateEntityLengthsFile(
                    spc,
                    source.Left.Left.Left,
                    source.Left.Left.Right,
                    source.Left.Right,
                    source.Right
                )
        );
    }

    private static void GenerateEntityLengthsFile(
        SourceProductionContext context,
        Compilation compilation,
        ImmutableArray<EntityTypeInfo?> fluentConfigurations,
        ImmutableArray<EntityTypeInfo?> attributeConfigurations,
        ImmutableArray<EntityTypeInfo?> dbContextConfigurations
    )
    {
        var sourceBuilder = new System.Text.StringBuilder();
        sourceBuilder.AppendLine("// <auto-generated/>");
        sourceBuilder.AppendLine($"namespace {compilation.AssemblyName};");
        sourceBuilder.AppendLine();
        sourceBuilder.AppendLine("public static partial class EntityLengths \r\n{");

        // Process all configurations
        var allConfigurations = fluentConfigurations
            .Concat(attributeConfigurations)
            .Concat(dbContextConfigurations)
            .Where(c => c != null)
            .GroupBy(c => c!.EntityType.Name)
            .ToList();

        var isFirst = true;
        foreach (var entityGroup in allConfigurations)
        {
            if (!isFirst)
                sourceBuilder.AppendLine();

            var allProperties = entityGroup
                .SelectMany(c => c!.StringProperties)
                .GroupBy(p => p.PropertyName)
                .Select(g => g.First())
                .ToList();

            GenerateEntityClass(sourceBuilder, entityGroup.Key, allProperties);
            isFirst = false;
        }

        sourceBuilder.AppendLine("}");

        context.AddSource("EntityLengths.g.cs", sourceBuilder.ToString());
    }

    private static void GenerateEntityClass(
        System.Text.StringBuilder sourceBuilder,
        string entityName,
        List<PropertyMaxLength> properties
    )
    {
        sourceBuilder.AppendLine($"\tpublic static partial class {entityName}");
        sourceBuilder.AppendLine("\t{");

        foreach (var prop in properties)
        {
            sourceBuilder.AppendLine(
                $"\t\tpublic const int {prop.PropertyName}Length = {prop.MaxLength};"
            );
        }

        sourceBuilder.AppendLine("\t}");
    }
}
